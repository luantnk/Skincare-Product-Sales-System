// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace BusinessObjects.Models;

public partial class SPSSContext : DbContext
{
    private readonly IConfiguration _configuration;

    public SPSSContext()
    {
    }

    public SPSSContext(DbContextOptions<SPSSContext> options)
        : base(options)
    {
    }

    public SPSSContext(DbContextOptions<SPSSContext> options, IConfiguration configuration)
        : base(options)
    {
        _configuration = configuration;
    }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    // public virtual DbSet<BlogImage> BlogImages { get; set; }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<CancelReason> CancelReasons { get; set; }

    public virtual DbSet<CartItem> CartItems { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductConfiguration> ProductConfigurations { get; set; }

    public virtual DbSet<ProductForSkinType> ProductForSkinTypes { get; set; }
    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<ProductItem> ProductItems { get; set; }

    public virtual DbSet<ProductStatus> ProductStatuses { get; set; }

    public virtual DbSet<QuizOption> QuizOptions { get; set; }

    public virtual DbSet<QuizQuestion> QuizQuestions { get; set; }

    public virtual DbSet<QuizResult> QuizResults { get; set; }

    public virtual DbSet<QuizSet> QuizSets { get; set; }

    public virtual DbSet<RefreshToken> RefreshTokens { get; set; }

    public virtual DbSet<Reply> Replies { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<ReviewImage> ReviewImages { get; set; }

    public virtual DbSet<SkinType> SkinTypes { get; set; }

    public virtual DbSet<StatusChange> StatusChanges { get; set; }

    public virtual DbSet<Variation> Variations { get; set; }

    public virtual DbSet<VariationOption> VariationOptions { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    public virtual DbSet<SkinTypeRoutineStep> SkinTypeRoutineSteps { get; set; }

    public virtual DbSet<SkinAnalysisResult> SkinAnalysisResults { get; set; }

    public virtual DbSet<SkinAnalysisIssue> SkinAnalysisIssues { get; set; }

    public virtual DbSet<SkinAnalysisRecommendation> SkinAnalysisRecommendations { get; set; }

    // Add the Transaction DbSet
    public virtual DbSet<Transaction> Transactions { get; set; }
    
    // Add the ChatHistory DbSet
    public virtual DbSet<ChatHistory> ChatHistories { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            // Attempt to use configuration if available
            if (_configuration != null)
            {
                string connectionString = _configuration.GetConnectionString("SPSS");
                optionsBuilder.UseSqlServer(connectionString);
            }
            else
            {
                // Fallback connection string for migrations and design-time
                optionsBuilder.UseSqlServer("Server=(local);Database=SPSS;User ID=sa;Password=123456789;TrustServerCertificate=True");
            }
            
            optionsBuilder.EnableSensitiveDataLogging();
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasIndex(e => e.RoleId, "IX_Users_RoleId");
            entity.HasIndex(e => e.SkinTypeId, "IX_Users_SkinTypeId");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.SkinTypeId); // Nullable by default
            entity.Property(e => e.RoleId);     // Nullable by default
            entity.Property(e => e.UserName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.SurName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.LastName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.EmailAddress).IsRequired().HasMaxLength(100);
            entity.Property(e => e.PhoneNumber).IsRequired().HasMaxLength(20);
            entity.Property(e => e.Status).IsRequired().HasMaxLength(50);
            entity.Property(e => e.Password).IsRequired().HasMaxLength(500);
            entity.Property(e => e.AvatarUrl).HasMaxLength(500); // Remove IsRequired() to match string?
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.LastUpdatedBy).HasMaxLength(100);
            entity.Property(e => e.DeletedBy).HasMaxLength(100); // Nullable by default
            entity.Property(e => e.IsDeleted);

            // Add missing fields
            entity.Property(e => e.CreatedTime).IsRequired();
            entity.Property(e => e.LastUpdatedTime).IsRequired();
            entity.Property(e => e.DeletedTime).IsRequired();
 

            entity.HasOne(d => d.Role).WithMany(p => p.Users).HasForeignKey(d => d.RoleId);
            entity.HasOne(d => d.SkinType).WithMany(p => p.AspNetUsers).HasForeignKey(d => d.SkinTypeId);
        });
        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.RoleId).ValueGeneratedNever();
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasMany(e => e.Users)
                .WithOne(e => e.Role)
                .HasForeignKey(e => e.RoleId)
                .OnDelete(DeleteBehavior.NoAction);
        });


        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasIndex(e => e.CountryId, "IX_Addresses_CountryId");

            entity.HasIndex(e => e.UserId, "IX_Addresses_UserId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddressLine1)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.AddressLine2).HasMaxLength(200);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.DeletedBy).HasMaxLength(100);
            entity.Property(e => e.LastUpdatedBy).HasMaxLength(100);
            entity.Property(e => e.Postcode)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Province)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.StreetNumber)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Ward)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Country).WithMany(p => p.Addresses).HasForeignKey(d => d.CountryId);

            entity.HasOne(d => d.User).WithMany(p => p.Addresses).HasForeignKey(d => d.UserId);
        });

        // ... other entity configurations ...

        modelBuilder.Entity<SkinTypeRoutineStep>(entity =>
        {
            // Định nghĩa khóa chính
            entity.HasKey(e => e.Id);

            // Cấu hình các thuộc tính
            entity.Property(e => e.Id).ValueGeneratedNever(); // Hoặc ValueGeneratedOnAdd() nếu ID tự động
            entity.Property(e => e.StepName).IsRequired().HasMaxLength(200);
            entity.Property(e => e.Instruction).HasMaxLength(1000);
            entity.Property(e => e.Order).IsRequired();

            // Quan hệ với SkinType
            entity.HasOne(e => e.SkinType)
                  .WithMany(e => e.SkinTypeRoutineSteps)
                  .HasForeignKey(e => e.SkinTypeId)
                  .OnDelete(DeleteBehavior.Cascade); // Xóa các bước khi SkinType bị xóa

            // Quan hệ với ProductCategory
            entity.HasOne(e => e.Category)
                  .WithMany()
                  .HasForeignKey(e => e.CategoryId)
                  .OnDelete(DeleteBehavior.Restrict); // Không xóa Category nếu có bước liên quan
        });

        modelBuilder.Entity<SkinAnalysisResult>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ImageUrl).IsRequired().HasMaxLength(1000);
            entity.Property(e => e.FullAnalysisJson).HasColumnType("nvarchar(max)");
            
            // Foreign keys
            entity.HasOne(e => e.User)
                .WithMany()
                .HasForeignKey(e => e.UserId)
                .OnDelete(DeleteBehavior.Restrict);
                
            entity.HasOne(e => e.SkinType)
                .WithMany()
                .HasForeignKey(e => e.SkinTypeId)
                .OnDelete(DeleteBehavior.Restrict);
        });
        
        modelBuilder.Entity<SkinAnalysisIssue>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.IssueName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(500);
            
            // Foreign key
            entity.HasOne(e => e.SkinAnalysisResult)
                .WithMany(e => e.SkinAnalysisIssues)
                .HasForeignKey(e => e.SkinAnalysisResultId)
                .OnDelete(DeleteBehavior.Cascade);
        });
        
        modelBuilder.Entity<SkinAnalysisRecommendation>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.RecommendationReason).HasMaxLength(1000);
            
            // Foreign keys
            entity.HasOne(e => e.SkinAnalysisResult)
                .WithMany(e => e.SkinAnalysisRecommendations)
                .HasForeignKey(e => e.SkinAnalysisResultId)
                .OnDelete(DeleteBehavior.Cascade);
                
            entity.HasOne(e => e.Product)
                .WithMany()
                .HasForeignKey(e => e.ProductId)
                .OnDelete(DeleteBehavior.Restrict);
        });

        // Configure ChatHistory entity relationships
        modelBuilder.Entity<ChatHistory>(entity =>
        {
            entity.HasKey(e => e.Id);
            
            entity.HasIndex(e => e.UserId, "IX_ChatHistories_UserId");
            entity.HasIndex(e => e.SessionId, "IX_ChatHistories_SessionId");
            
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.MessageContent).IsRequired().HasColumnType("nvarchar(max)");
            entity.Property(e => e.SenderType).IsRequired().HasMaxLength(10);
            entity.Property(e => e.SessionId).IsRequired().HasMaxLength(100);
            entity.Property(e => e.Timestamp).IsRequired();
            
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.LastUpdatedBy).HasMaxLength(100);
            entity.Property(e => e.DeletedBy).HasMaxLength(100);
            
            entity.HasOne(d => d.User)
                .WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict);
        });

        // Configure Transaction entity relationships
        modelBuilder.Entity<Transaction>()
            .HasOne(t => t.User)
            .WithMany()
            .HasForeignKey(t => t.UserId)
            .OnDelete(DeleteBehavior.Restrict);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}