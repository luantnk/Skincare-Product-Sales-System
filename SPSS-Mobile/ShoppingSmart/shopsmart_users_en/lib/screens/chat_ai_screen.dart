import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import '../screens/inner_screen/product_detail.dart';

class ChatAIScreen extends StatefulWidget {
  static const routeName = '/chat-ai';

  const ChatAIScreen({super.key});

  @override
  State<ChatAIScreen> createState() => _ChatAIScreenState();
}

class _ChatAIScreenState extends State<ChatAIScreen> {
  final TextEditingController _controller = TextEditingController();
  final List<_Message> _messages = [];
  bool _isLoading = false;
  bool _initialized = false;

  @override
  void initState() {
    super.initState();
    _initChat();
  }

  Future<void> _initChat() async {
    setState(() {
      _isLoading = true;
    });
    try {
      // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ API
      final products = await _fetchProducts();
      // T·∫°o prompt gi·ªõi thi·ªáu
      final introPrompt = _buildIntroPrompt(products);
      // G·ª≠i prompt cho Gemini ƒë·ªÉ AI ch√†o kh√°ch
      final aiReply = await _callGeminiAPI(introPrompt);
      setState(() {
        _messages.add(_Message(aiReply, false));
        _initialized = true;
      });
    } catch (e) {
      setState(() {
        _messages.add(
          _Message('L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m ho·∫∑c ch√†o AI: $e', false),
        );
        _initialized = true;
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<List<Map<String, dynamic>>> _fetchProducts() async {
    final url = Uri.parse(
      'https://spssapi-hxfzbchrcafgd2hg.southeastasia-01.azurewebsites.net/api/products?pageNumber=1&pageSize=10&sortBy=newest',
    );
    final res = await http.get(url);
    if (res.statusCode == 200) {
      final data = json.decode(res.body);
      final items = data['data']['items'] as List<dynamic>;
      return items.cast<Map<String, dynamic>>();
    } else {
      throw 'Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch s·∫£n ph·∫©m: ${res.body}';
    }
  }

  String _buildIntroPrompt(List<Map<String, dynamic>> products) {
    final productList = products
        .map((p) => '${p['name']}: ${p['description'] ?? ''}')
        .join('\n');
    return '''
B·∫°n l√† tr·ª£ l√Ω ·∫£o c·ªßa Skincede - m·ªôt website th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ chuy√™n b√°n ƒë·ªì skincare ch√≠nh h√£ng. 
T√™n web/app l√† Skincede. Khi kh√°ch h·ªèi v·ªÅ s·∫£n ph·∫©m, ch·ªâ ƒë∆∞·ª£c tr·∫£ l·ªùi d·ª±a tr√™n danh s√°ch s·∫£n ph·∫©m d∆∞·ªõi ƒë√¢y, kh√¥ng ƒë∆∞·ª£c b·ªãa ra s·∫£n ph·∫©m kh√°c, kh√¥ng tr·∫£ l·ªùi v·ªÅ th∆∞∆°ng hi·ªáu kh√°c, kh√¥ng n√≥i m√¨nh l√† AI c·ªßa Google.

Danh s√°ch s·∫£n ph·∫©m hi·ªán c√≥:
$productList

Khi kh√°ch nh·∫Øn tin l·∫ßn ƒë·∫ßu, h√£y ch√†o ƒë√∫ng m·∫´u sau (c√≥ th·ªÉ th√™m icon c·∫£m x√∫c):
"Ch√†o b·∫°n y√™u skincare! M√¨nh l√† Skincede ƒë√¢y ·∫°. ü•∞\nR·∫•t vui v√¨ b·∫°n ƒë√£ gh√© thƒÉm Skincede - thi√™n ƒë∆∞·ªùng skincare ch√≠nh h√£ng! ‚ú®\nB·∫°n ƒëang quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o hay c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ v·ªÅ da c·∫ßn t∆∞ v·∫•n kh√¥ng ·∫°? H√£y cho Skincede bi·∫øt ƒë·ªÉ m√¨nh c√≥ th·ªÉ gi√∫p b·∫°n l·ª±a ch·ªçn ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t nha! üí¨"

N·∫øu kh√°ch h·ªèi ngo√†i ph·∫°m vi s·∫£n ph·∫©m tr√™n, h√£y tr·∫£ l·ªùi: "Xin l·ªói, m√¨nh ch·ªâ h·ªó tr·ª£ t∆∞ v·∫•n c√°c s·∫£n ph·∫©m c·ªßa Skincede th√¥i ·∫°."
Lu√¥n x∆∞ng l√† Skincede, tr·∫£ l·ªùi th√¢n thi·ªán, ng·∫Øn g·ªçn, ƒë√∫ng tr·ªçng t√¢m.
''';
  }

  Future<void> _sendMessage() async {
    final text = _controller.text.trim();
    if (text.isEmpty) return;
    setState(() {
      _messages.add(_Message(text, true));
      _isLoading = true;
      _controller.clear();
    });
    try {
      // L·∫•y l·∫°i s·∫£n ph·∫©m m·ªõi nh·∫•t m·ªói l·∫ßn g·ª≠i
      final products = await _fetchProducts();
      final introPrompt = _buildIntroPrompt(products);

      // T·∫°o danh s√°ch messages g·ª≠i l√™n Gemini: prompt h·ªá th·ªëng + h·ªôi tho·∫°i
      final List<Map<String, dynamic>> geminiMessages = [
        {
          "role": "user",
          "parts": [
            {"text": introPrompt},
          ],
        },
        ..._messages.map(
          (msg) => {
            "role": msg.isUser ? "user" : "model",
            "parts": [
              {"text": msg.text},
            ],
          },
        ),
        {
          "role": "user",
          "parts": [
            {"text": text},
          ],
        },
      ];

      final aiReply = await _callGeminiAPIWithMessages(geminiMessages);
      // T√¨m c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn trong c√¢u tr·∫£ l·ªùi
      final mentioned = extractMentionedProducts(aiReply, products);
      setState(() {
        _messages.add(_Message(aiReply, false, mentionedProducts: mentioned));
      });
    } catch (e) {
      setState(() {
        _messages.add(_Message('L·ªói khi g·ªçi AI: $e', false));
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  List<Map<String, dynamic>> extractMentionedProducts(
    String aiReply,
    List<Map<String, dynamic>> products,
  ) {
    final mentioned = <Map<String, dynamic>>[];
    for (final p in products) {
      final name = (p['name'] ?? '').toString().toLowerCase();
      if (name.isNotEmpty && aiReply.toLowerCase().contains(name)) {
        mentioned.add(p);
      }
    }
    return mentioned;
  }

  Future<String> _callGeminiAPI(String prompt) async {
    const apiKey = 'AIzaSyBDX1bPxSJl5U3riYSjS9JCs1pyfb3B4AE';
    final url = Uri.parse(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$apiKey',
    );
    final body = jsonEncode({
      "contents": [
        {
          "parts": [
            {"text": prompt},
          ],
        },
      ],
    });
    final res = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: body,
    );
    if (res.statusCode == 200) {
      final data = json.decode(res.body);
      final text = data['candidates']?[0]?['content']?['parts']?[0]?['text'];
      return text ?? 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.';
    } else {
      throw 'Gemini API tr·∫£ v·ªÅ l·ªói: ${res.body}';
    }
  }

  Future<String> _callGeminiAPIWithMessages(
    List<Map<String, dynamic>> messages,
  ) async {
    const apiKey = 'AIzaSyBDX1bPxSJl5U3riYSjS9JCs1pyfb3B4AE';
    final url = Uri.parse(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$apiKey',
    );
    final body = jsonEncode({"contents": messages});
    final res = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: body,
    );
    if (res.statusCode == 200) {
      final data = json.decode(res.body);
      final text = data['candidates']?[0]?['content']?['parts']?[0]?['text'];
      return text ?? 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.';
    } else {
      throw 'Gemini API tr·∫£ v·ªÅ l·ªói: ${res.body}';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Chat v·ªõi AI Gemini'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.all(16),
              itemCount: _messages.length,
              itemBuilder: (context, idx) {
                final msg = _messages[idx];
                return Column(
                  crossAxisAlignment:
                      msg.isUser
                          ? CrossAxisAlignment.end
                          : CrossAxisAlignment.start,
                  children: [
                    Align(
                      alignment:
                          msg.isUser
                              ? Alignment.centerRight
                              : Alignment.centerLeft,
                      child: Container(
                        margin: const EdgeInsets.symmetric(vertical: 4),
                        padding: const EdgeInsets.symmetric(
                          vertical: 10,
                          horizontal: 14,
                        ),
                        decoration: BoxDecoration(
                          color:
                              msg.isUser
                                  ? Colors.deepPurple.withOpacity(0.1)
                                  : Colors.deepPurple.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(16),
                        ),
                        child: Text(msg.text),
                      ),
                    ),
                    if (!msg.isUser &&
                        msg.mentionedProducts != null &&
                        msg.mentionedProducts!.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.only(top: 6, bottom: 8),
                        child: Wrap(
                          spacing: 12,
                          runSpacing: 12,
                          children:
                              msg.mentionedProducts!
                                  .map((prod) => _ProductCard(product: prod))
                                  .toList(),
                        ),
                      ),
                  ],
                );
              },
            ),
          ),
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(8.0),
              child: CircularProgressIndicator(),
            ),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _controller,
                      decoration: const InputDecoration(
                        hintText: 'Nh·∫≠p tin nh·∫Øn cho AI...',
                        border: OutlineInputBorder(),
                        isDense: true,
                      ),
                      onSubmitted: (_) => _sendMessage(),
                    ),
                  ),
                  const SizedBox(width: 8),
                  IconButton(
                    icon: const Icon(Icons.send, color: Colors.deepPurple),
                    onPressed: _isLoading ? null : _sendMessage,
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class _Message {
  final String text;
  final bool isUser;
  final List<Map<String, dynamic>>? mentionedProducts;
  _Message(this.text, this.isUser, {this.mentionedProducts});
}

class _ProductCard extends StatelessWidget {
  final Map<String, dynamic> product;
  const _ProductCard({required this.product});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        Navigator.pushNamed(
          context,
          ProductDetailsScreen.routeName,
          arguments: product['id'],
        );
      },
      child: Container(
        width: 160,
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [BoxShadow(color: Colors.black12, blurRadius: 4)],
          border: Border.all(color: Colors.deepPurple.withOpacity(0.15)),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (product['thumbnail'] != null)
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(
                  product['thumbnail'],
                  height: 60,
                  width: double.infinity,
                  fit: BoxFit.cover,
                  errorBuilder: (_, __, ___) => Icon(Icons.image, size: 40),
                ),
              ),
            const SizedBox(height: 6),
            Text(
              product['name'] ?? '',
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
              style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 13),
            ),
            const SizedBox(height: 4),
            Text(
              product['price'] != null ? '${product['price']} ƒë' : '',
              style: const TextStyle(
                color: Colors.deepPurple,
                fontSize: 12,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
